# Copyright 2019 Camptocamp SA
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl)
from odoo.tests import SavepointCase


class TestAccountAnalyticSalesperson(SavepointCase):

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.env = cls.env(context=dict(cls.env.context, tracking_disable=True))
        cls.expense_product = cls.env['product.product'].search(
            [('expense_policy', 'not in', [False, 'no'])], limit=1
        )
        cls.other_product = cls.env['product.product'].search(
            [('id', '!=', cls.expense_product.id)], limit=1
        )

    def _create_and_confirm_sale_order(self, product):
        sale_order = self.env['sale.order'].create({
            'partner_id': self.env.ref('base.res_partner_12').id,
            'user_id': self.env.ref('base.user_demo').id,
        })
        sale_order_line = self.env['sale.order.line'].create({
            'order_id': sale_order.id,
            'name': product.name,
            'product_id': product.id,
            'product_uom_qty': 1.00,
            'product_uom': product.uom_id.id,
            'price_unit': 1,
        })
        sale_order_line.product_id_change()
        sale_order.onchange_partner_id()
        sale_order._compute_tax_id()
        sale_order.action_confirm()
        return sale_order

    def test_expense_product(self):
        """Test analytic account generated by odoo"""
        sale_order = self._create_and_confirm_sale_order(self.expense_product)
        self.assertTrue(sale_order.analytic_account_id)
        self.assertEqual(
            sale_order.analytic_account_id.user_id, sale_order.user_id
        )

    def test_no_expense_product(self):
        """Test analytic account generated by module"""
        sale_order = self._create_and_confirm_sale_order(self.other_product)
        self.assertTrue(sale_order.analytic_account_id)
        self.assertEqual(
            sale_order.analytic_account_id.user_id, sale_order.user_id
        )
